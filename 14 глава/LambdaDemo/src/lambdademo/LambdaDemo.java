package lambdademo;

/**
 * Демонстрация двух простых лямбда-выражений.
 * @author lomov
 */
public class LambdaDemo {

    public static void main(String[] args) {
        
        MyValue myVal;//Обьявляется ссылку на интерфейс
        
        /**
         * Здесь лямбда-выражение - это просто константа.
         * При его назначении переменной myVal создаётся
         * экземпляр класса, в котором лямбда выражение
         * реализует метод getValue() интерфейса MyValue
         */
        myVal = () -> 98.6;//Простое лямбда выражение
        
        //Вызвать метод getValue(), предоставляемый ранее
        //назначенным лямбда-выражением
        System.out.println("Постоянное значение: " + myVal.getValue());
        
        /**
         * Создать параметризированное лямбда-выражение и назначить его
         * ссылке на экземпляр MyParamValue. Это лямбда-выражение
         * возвращает обратную величину своего аргумента
         */
        MyParamValue myPval = (n) -> 1.0 / n;//Лямбда-выражение имеющее параметр
        
        //Вызвать метод getValue() по средствам ссылки myPval.
        System.out.println("Обратная величина 4 = " + myPval.getValue(4.0));
        System.out.println("Обратная величина 8 = " + myPval.getValue(8.0));
        
        /**
         * Лямбда-выражение должно быть совместимым с методом,
         * который определяется функциональным интерфейсом. Поэтому
         * приведённые ниже два фрагмента кода, не будут работать.
         */
        //myVal = () -> "three";//Ошибка несовместимости типов!
        //myPval = () -> Math.random();//Ошибка! Требуется параметр!
    }
    
}
