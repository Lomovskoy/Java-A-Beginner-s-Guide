									/********************************
									 *								*
									 *	 	Вложенные классы		*
									 *	Статически и динамические	*								 
									 *								*
									 ********************************/
+-------------------------------------------------------+-----------------------------------------------------------------------------------+
| 					Вид класса							|							Описание												|
+-------------------------------------------------------+-----------------------------------------------------------------------------------+
|  Статические вложенные классы (static nested classes)	|	Статические вложенные классы, не имеют доступа к нестатическим полям и методам	|
|														|	обрамляющего класса, что в некотором роде аналогично статическим методам,		|
|														|	объявленным внутри класса. Доступ к нестатическим полям и методам может			|
|														|	осуществляться только через ссылку на экземпляр обрамляющего класса. 			|
|														|	В этом плане static nested классы очень похожи на любые другие классы 			|
|														|	верхнего уровня.																|
+-------------------------------------------------------+-----------------------------------------------------------------------------------+
|  Внутренние классы-члены (member inner classes)		|	Внутренние классы-члены ассоциируются не с самим внешним классом, а с его		|
|														|	экземпляром. При этом они имеют доступ ко всем его полям и методам. Например:	|
|														|	Для обращения к методу обрамляющего класса необходимо использовать такую 		|
|														|	конструкцию - OuterClass.this.method()											|
+-------------------------------------------------------+-----------------------------------------------------------------------------------+
|  локальные классы (local classes);					|	Локальные классы (local classes) определяются в блоке Java кода. На практике 	|
|														|	чаще всего объявление происходит в методе некоторого другого класса. Хотя 		|
|														|	объявлять локальный класс можно внутри статических и нестатических блоков 		|
|														|	инициализации.																	|
|														|	Как и member классы, локальные классы ассоциируются с экземпляром обрамляющего	|
|														| 	класса и имеют доступ к его полям и методам. Кроме этого, локальный класс 		|
|														|	может обращаться к локальным переменным и параметрам метода, если они 			|
|														|	объявлены с модификатором final.												|
|														|	У локальных классов есть множество ограничений:									|
|														|		*они видны только в пределах блока, в котором объявлены;					|
|														|		*они не могут быть объявлены как private, public, protected или static;		|
|														|		*они не могут иметь внутри себя статических объявлений (полей, методов,		|
|														|			классов); исключением являются константы (static final);				|
+-------------------------------------------------------+-----------------------------------------------------------------------------------+
|  анонимные классы (anonymous classes).				|	Анонимные классы являются важным подспорьем в повседневной жизни Java-			|
|														|	программистов. Анонимный класс (anonymous class) - это локальный класс 			|
|														|	без имени.																		|
|														|	На основании анонимного класса создается поток и запускается с помощью метода 	|
|														|	start класса Thread. Синтаксис создания анонимного класса базируется на 		|
|														|	использовании оператора new с именем класса (интерфейса) и телом 				|
|														|	новосозданного анонимного класса.												|
|														|	Основное ограничение при использовании анонимных классов - это невозможность	|
|														|	описания конструктора, так как класс не имеет имени. Аргументы, указанные в 	|
|														|	скобках, автоматически используются для вызова конструктора базового класса с	|
|														|	теми же параметрами.															|
|														|	Так как анонимный класс является локальным классом, он имеет все те же 			|
|														|	ограничения, что и локальный класс.												|
|														|	Использование анонимных классов оправдано во многих случаях, 					|
|														|	в частности когда:																|
|														|		*тело класса является очень коротким;										|
|														|		*нужен только один экземпляр класса;										|
|														|		*класс используется в месте его создания или сразу после него;				|
|														|		*имя класса не важно и не облегчает понимание кода.							|
+-------------------------------------------------------+-----------------------------------------------------------------------------------+



		
