/*======================================|
|										|
|	Что я узнал нового по основам Java 	|
|		c 5.02.2018 по 14.02.2018		|
|										|
|======================================*/

1. В Java нельзя обьявлять переменные с одинаковыми именами,
во внешней и влодженной области видимости по типу:

//--------------------------------------
2. В Java есть укороченное и полные опараторы сравнения
по типу:
	if(a > 0 | b > 0)
	if(a > 0 || b > 0)
	if(a > 0 & b > 0)
	if(a > 0 && b > 0)

Задача:
			
	int a = 2;
	int b = 4;
	
	if(a > 1 || b > a)
		System.out.print("Первая строка");
	else
		System.out.print("Вторая строка");
	
	if(a > 1 | b > a)
		System.out.print("Первая строка");
	else
		System.out.print("Вторая строка");
	
	Что выведится в 1м варианте а что во втором и какая разница?
//--------------------------------------
3. В Java цикл for можно оставлять пустым по типу:
	for(;;)	

Задача:
	
	for(;;)
		System.out.print("Строка цикла");
	Сколько раз выполнится цикл?
//--------------------------------------
4. В Java break можно использовать как goto ставя ему метку, 
только метка должна находиться в блоке кода содержащим этот опуратор,
то же самое актуально и для оператора continue по типу:

	for(int i = 1; i < 4; i++){
		one:{
			two:{
				three:{
					System.out.println("\ni = " + i);
					if(i == 1) break one;
					if(i == 2) break two;
					if(i == 3) break three;
				}
				System.out.println("После блока three");
			}
			System.out.println("После блока two");
		}
		System.out.println("После блока one");
	}
	System.out.println("После цикла for");
	
Задача:

	one: for(int x = 0; x < 5; x++){
		for(int y = 0; y < 5; y++){
			if(y == 2) ;
				System.out.println("x и y: " + x + " " + y);
		}
	}
	System.out.println();
		
	for(int x = 0; x < 5; x++) {
		for(int y = 0; y < 5; y++){
			if(y == 2) break one;
				System.out.println("x и y: " + x + " " + y);
		}
	}
	
	Что будет в результате компиляции этого когда
	и почему?
//--------------------------------------
5. В Java char имеет числовой экввалент и с ним можно
совершать арифметические операции по типу:
	char ch = 'a';
	for(int i=0; i<127; i++)
		ch += i;
	
Задача:
	
	char ch = 'a';
	ch += 32;
	System.out.print(ch);
	Что выведет на экран программа и почему?
	Актуально ли это для других буквенных симовлов?
//--------------------------------------
6. В Java есть сборщик мусора и метод finalize ()
который выполняется при удалении обьекта по типу:
	protected void finalize(){
		System.out.println("Сборщик мусора удалил объект: ");
	}
Задача:
	Как заставить сборщик мусора удалять обьекты?
	Написать простейшаую программу, в которой будет создаваться 
	большое количество обьектов или переменных и при из удалении
	и при их удалении будет выводиться 
//--------------------------------------
7. В Java есть ключевое слово this по типу:
	this a = a;
	
Задача: 
	В каких случаях необходимо использовать это слово?
	Почему оно используется крайне редко?
//--------------------------------------
8. В Java есть нерегулярные массивы

Задача:
	Как обьявить нерегулятный массив?
//--------------------------------------
9. В Java есть альтернативный синтаксис объявления массивов
по типу:
	int counter[] = new int[3];
	int[] counter = new int[3];
	
Задача:
	В каких случаях необходимо применять альтернативный синтаксис
	обьявления массива?
Задача:
	Есть 2 массива 
	int counter1[] = new int[3];
	int counter2[] = counter1;
	
	Что будет если изменить counter1 а затем вывесли на печать counter2?
//--------------------------------------
10. В Java есть цикл for-each по типу:
	for(int х : nums) {
		System.out.println("Знaчeниe: " + х);
		sum += х;
	}
	
Задача:
	Каковы ограничения этого типа цикла? Где его можноиспользовать а где нет?
Задача:
	Как правильно написать два вложенных цикла for-each для обработки двумерного и более массивов?
//--------------------------------------
11. В Java есть тип данных String и метод equals()
Задача:
	Зачем в классе String определен метод equals()? Не проще ли использовать
	вместо него операцию == ?
//--------------------------------------
12. В Java есть поразрядные операции по типу:
	& >> >>> << ~ | ^
	
Задача:
	Чем отличается поразрядная операция >> от >>> ?
Задача:
	char ch;
	for(int i=O; i < 10; i++){
		ch = ( cha r) ( ' а ' + i ) ;
		System.out.print(ch);
		ch = (char) ( (int) ch & 65503);
		System.out.print(ch + " ");
	}
	Что делает данный код? Что будет выведено на экран?
Задача:
	Можно ли с помощью поразрядного исключающего ИЛИ
	зашифровывать сообщения и если да, что что для этого ещё нужно?
Задача:
	Для чего можно использовать побитовыесдвиги? >> << и >>> ?
Задача:
	В приведенном ниже фрагменте кода содержится знак&. 
	Какой операции он соответствует:
	поразрядной или логической? Обоснуйте свой ответ.
	boolean а, b;
	//...
	if (а & b) //...